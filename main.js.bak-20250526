// SpeakCards main.js 备份
// 备份时间：2025-05-26
// 用于回滚或对比

/* --- 备份内容开始 --- */

// ...existing code...

// 智能发音主入口，自动选择TTS方案
async function speakText(text, lang = 'en') {
    if (!text) return;
    try {
        // 优先使用增强浏览器TTS
        if (window.TTSWithCache && TTSWithCache.playEnhancedBrowserTTS) {
            const ok = await TTSWithCache.playEnhancedBrowserTTS(text, lang, true);
            if (ok) return;
        }
        // 兼容直接引入 tts-cache.js 的情况
        if (typeof playEnhancedBrowserTTS === 'function') {
            const ok = await playEnhancedBrowserTTS(text, lang, true);
            if (ok) return;
        }
        // 尝试 ResponsiveVoice
        if (typeof responsiveVoice !== 'undefined' && responsiveVoice.speak) {
            let spoken = false;
            try {
                responsiveVoice.speak(text, lang === 'zh' ? 'Chinese Female' : 'US English Female', {
                    onend: function() { spoken = true; },
                    onerror: function() { spoken = false; }
                });
                // 简单延迟判断是否发音
                await new Promise(resolve => setTimeout(resolve, 800));
                if (spoken) return;
            } catch (e) { /* 降级 */ }
        }
        // 尝试 ElevenLabs（需配置API密钥）
        if (typeof playElevenLabsTTS === 'function') {
            const ok = await playElevenLabsTTS(text, lang);
            if (ok) return;
        }
        // 最后兜底：浏览器原生TTS
        if (typeof speechSynthesis !== 'undefined') {
            try {
                const utter = new SpeechSynthesisUtterance(text);
                utter.lang = lang === 'zh' ? 'zh-CN' : 'en-US';
                let spoken = false;
                utter.onend = function() { spoken = true; };
                utter.onerror = function() { spoken = false; };
                speechSynthesis.speak(utter);
                await new Promise(resolve => setTimeout(resolve, 800));
                if (spoken) return;
            } catch (e) { /* 降级 */ }
        }
        showMessage('未检测到可用的语音合成服务');
    } catch (err) {
        console.error('speakText error:', err);
        showMessage('发音失败：' + (err.message || err));
    }
}

// 保证 speakText 全局可用
window.speakText = speakText;

// ElevenLabs TTS (免费版)
async function playElevenLabsTTS(text, lang = 'zh') {
    try {
        const config = typeof TTS_CONFIG !== 'undefined' ? TTS_CONFIG.elevenlabs : null;
        if (!config || config.apiKey === 'YOUR_FREE_API_KEY') {
            // 不提示，不抛错，直接return false
            return false;
        }
        showMessage('正在使用 ElevenLabs 语音...');
        const voiceId = lang === 'en' 
            ? config.voices.english.female 
            : config.voices.chinese.female;
        const response = await fetch(`https://api.elevenlabs.io/v1/text-to-speech/${voiceId}`,
            {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'xi-api-key': config.apiKey
                },
                body: JSON.stringify({
                    text: text,
                    voice: voiceId,
                    model_id: config.modelId || 'eleven_multilingual_v1',
                    speed: config.speed || 1.0,
                    stability: config.stability || 0.75,
                    warmth: config.warmth || 0.75
                })
            }
        );
        if (!response.ok) {
            return false;
        }
        const data = await response.json();
        if (data && data.audio) {
            try {
                const audio = new Audio(data.audio);
                await audio.play();
                return true;
            } catch (e) {
                return false;
            }
        } else {
            return false;
        }
    } catch (error) {
        return false;
    }
}

// ...existing code...

/* --- 备份内容结束 --- */
